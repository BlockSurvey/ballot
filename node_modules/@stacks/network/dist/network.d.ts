import { TransactionVersion, ChainID } from '@stacks/common';
import { FetchFn } from './fetch';
export declare const HIRO_MAINNET_DEFAULT = "https://stacks-node-api.mainnet.stacks.co";
export declare const HIRO_TESTNET_DEFAULT = "https://stacks-node-api.testnet.stacks.co";
export declare const HIRO_MOCKNET_DEFAULT = "http://localhost:3999";
export interface NetworkConfig {
    url: string;
    fetchFn?: FetchFn;
}
export declare const StacksNetworks: readonly ["mainnet", "testnet"];
export declare type StacksNetworkName = typeof StacksNetworks[number];
export declare class StacksNetwork {
    version: TransactionVersion;
    chainId: ChainID;
    bnsLookupUrl: string;
    broadcastEndpoint: string;
    transferFeeEstimateEndpoint: string;
    transactionFeeEstimateEndpoint: string;
    accountEndpoint: string;
    contractAbiEndpoint: string;
    readOnlyFunctionCallEndpoint: string;
    readonly coreApiUrl: string;
    fetchFn: FetchFn;
    constructor(networkConfig: NetworkConfig);
    static fromName: (networkName: StacksNetworkName) => StacksNetwork;
    static fromNameOrNetwork: (network: StacksNetworkName | StacksNetwork) => StacksNetwork;
    isMainnet: () => boolean;
    getBroadcastApiUrl: () => string;
    getTransferFeeEstimateApiUrl: () => string;
    getTransactionFeeEstimateApiUrl: () => string;
    getAccountApiUrl: (address: string) => string;
    getAbiApiUrl: (address: string, contract: string) => string;
    getReadOnlyFunctionCallApiUrl: (contractAddress: string, contractName: string, functionName: string) => string;
    getInfoUrl: () => string;
    getBlockTimeInfoUrl: () => string;
    getPoxInfoUrl: () => string;
    getRewardsUrl: (address: string, options?: any) => string;
    getRewardsTotalUrl: (address: string) => string;
    getRewardHoldersUrl: (address: string, options?: any) => string;
    getStackerInfoUrl: (contractAddress: string, contractName: string) => string;
    getNameInfo(fullyQualifiedName: string): Promise<any>;
}
export declare class StacksMainnet extends StacksNetwork {
    version: TransactionVersion;
    chainId: ChainID;
    constructor(opts?: Partial<NetworkConfig>);
}
export declare class StacksTestnet extends StacksNetwork {
    version: TransactionVersion;
    chainId: ChainID;
    constructor(opts?: Partial<NetworkConfig>);
}
export declare class StacksMocknet extends StacksNetwork {
    version: TransactionVersion;
    chainId: ChainID;
    constructor(opts?: Partial<NetworkConfig>);
}
