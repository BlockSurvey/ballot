{"version":3,"file":"index.esm.js","sources":["../../src/transactions/index.ts"],"sourcesContent":["import { UserSession, AppConfig } from '@stacks/auth';\nimport { createUnsecuredToken, Json, SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  TransactionPopup,\n  TransactionOptions,\n  STXTransferOptions,\n  STXTransferPayload,\n  TransactionPayload,\n  TransactionTypes,\n  STXTransferSponsoredOptions,\n  STXTransferRegularOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  SponsoredFinishedTxPayload,\n  FinishedTxPayload,\n} from '../types/transactions';\nimport {\n  serializeCV,\n  ChainID,\n  deserializeTransaction,\n  BufferReader,\n  serializePostCondition,\n  PostCondition,\n} from '@stacks/transactions';\nimport { getStacksProvider } from '../utils';\nimport { StacksTestnet } from '@stacks/network';\n\n// TODO extract out of transactions\nexport const getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport function hasAppPrivateKey(userSession?: UserSession) {\n  try {\n    const session = getUserSession(userSession).loadUserData();\n    return session.appPrivateKey;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\n// TODO extract out of transactions\nexport function getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n\n  // Legacy auth using localstorage with appPrivateKey\n  if (hasAppPrivateKey(options.userSession)) {\n    const userSession = getUserSession(options.userSession);\n    const defaults: TransactionOptions = {\n      ...options,\n      network,\n      userSession,\n    };\n\n    return {\n      stxAddress: getStxAddress(defaults),\n      ...defaults,\n    };\n  }\n\n  // User has not authed, we're relying on the app having previously having been\n  // given permissions from  `stx_requestAccounts`, and the wallet recognising the app's origin\n  // const hasSetRequiredStxAddressPropForRequestAccountFlow = 'stxAddress' in options;\n  // if (!hasSetRequiredStxAddressPropForRequestAccountFlow) {\n  //   throw new Error(\n  //     'Must set property `stxAddress` when using `stx_requestAccounts to initiate transaction`'\n  //   );\n  // }\n  return { ...options, network };\n}\n\nfunction encodePostConditions(postConditions: PostCondition[]) {\n  return postConditions.map(pc => serializePostCondition(pc).toString('hex'));\n}\n\nasync function signPayload(payload: TransactionPayload, privateKey: string) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({ ...payload, postConditions } as any);\n}\n\nfunction createUnsignedTransactionPayload(payload: Partial<TransactionPayload>) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  return createUnsecuredToken({ ...payload, postConditions } as unknown as Json);\n}\n\nconst openTransactionPopup = async ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed');\n  }\n\n  try {\n    const txResponse = await provider.transactionRequest(token);\n    const { txRaw } = txResponse;\n    const txBuffer = Buffer.from(txRaw.replace(/^0x/, ''), 'hex');\n    const stacksTransaction = deserializeTransaction(new BufferReader(txBuffer));\n\n    if ('sponsored' in options && options.sponsored) {\n      options.onFinish?.({\n        ...(txResponse as SponsoredFinishedTxPayload),\n        stacksTransaction,\n      });\n      return;\n    }\n    options.onFinish?.({\n      ...(txResponse as FinishedTxPayload),\n      stacksTransaction,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during transaction request', error);\n    options.onCancel?.();\n  }\n};\n\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return serializeCV(arg).toString('hex');\n  });\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractCallPayload = {\n      ..._options,\n      functionArgs: args,\n      txType: TransactionTypes.ContractCall,\n      publicKey,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n  const payload: Partial<ContractCallPayload> = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractDeployPayload = {\n      ..._options,\n      publicKey,\n      txType: TransactionTypes.ContractDeploy,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<ContractDeployPayload> = {\n    ..._options,\n    txType: TransactionTypes.ContractDeploy,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: STXTransferPayload = {\n      ..._options,\n      amount: amount.toString(10),\n      publicKey,\n      txType: TransactionTypes.STXTransfer,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<STXTransferPayload> = {\n    ..._options,\n    amount: amount.toString(10),\n    txType: TransactionTypes.STXTransfer,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n"],"names":["getUserSession","_userSession","userSession","appConfig","AppConfig","document","location","href","UserSession","session","loadUserData","appPrivateKey","e","getKeys","privateKey","publicKey","SECP256K1Client","derivePublicKey","options","stxAddress","network","stxAddresses","profile","chainIdToKey","ChainID","Mainnet","Testnet","address","chainId","StacksTestnet","hasAppPrivateKey","defaults","getStxAddress","postConditions","map","serializePostCondition","pc","toString","payload","encodePostConditions","tokenSigner","TokenSigner","signAsync","createUnsecuredToken","openTransactionPopup","token","provider","getStacksProvider","Error","transactionRequest","txResponse","txRaw","txBuffer","Buffer","from","replace","stacksTransaction","deserializeTransaction","BufferReader","sponsored","onFinish","error","onCancel","makeContractCallToken","functionArgs","appDetails","_options","args","arg","serializeCV","payload2","txType","TransactionTypes","ContractCall","signPayload","createUnsignedTransactionPayload","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","STXTransfer","makeTokenFn","getDefaults","generateTokenAndOpenPopup"],"mappings":"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"}