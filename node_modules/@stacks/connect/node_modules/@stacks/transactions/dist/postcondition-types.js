"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStandardPrincipal = exports.createContractPrincipal = exports.parsePrincipalString = exports.createAddress = exports.createAssetInfo = exports.createLPString = exports.parseAssetInfoString = void 0;
const constants_1 = require("./constants");
const c32check_1 = require("c32check");
const utils_1 = require("./utils");
function parseAssetInfoString(id) {
    const [assetAddress, assetContractName, assetTokenName] = id.split(/\.|::/);
    const assetInfo = createAssetInfo(assetAddress, assetContractName, assetTokenName);
    return assetInfo;
}
exports.parseAssetInfoString = parseAssetInfoString;
function createLPString(content, lengthPrefixBytes, maxLengthBytes) {
    const prefixLength = lengthPrefixBytes || 1;
    const maxLength = maxLengthBytes || constants_1.MAX_STRING_LENGTH_BYTES;
    if ((0, utils_1.exceedsMaxLengthBytes)(content, maxLength)) {
        throw new Error(`String length exceeds maximum bytes ${maxLength.toString()}`);
    }
    return {
        type: constants_1.StacksMessageType.LengthPrefixedString,
        content,
        lengthPrefixBytes: prefixLength,
        maxLengthBytes: maxLength,
    };
}
exports.createLPString = createLPString;
function createAssetInfo(addressString, contractName, assetName) {
    return {
        type: constants_1.StacksMessageType.AssetInfo,
        address: createAddress(addressString),
        contractName: createLPString(contractName),
        assetName: createLPString(assetName),
    };
}
exports.createAssetInfo = createAssetInfo;
function createAddress(c32AddressString) {
    const addressData = (0, c32check_1.c32addressDecode)(c32AddressString);
    return {
        type: constants_1.StacksMessageType.Address,
        version: addressData[0],
        hash160: addressData[1],
    };
}
exports.createAddress = createAddress;
function parsePrincipalString(principalString) {
    if (principalString.includes('.')) {
        const [address, contractName] = principalString.split('.');
        return createContractPrincipal(address, contractName);
    }
    else {
        return createStandardPrincipal(principalString);
    }
}
exports.parsePrincipalString = parsePrincipalString;
function createContractPrincipal(addressString, contractName) {
    const addr = createAddress(addressString);
    const name = createLPString(contractName);
    return {
        type: constants_1.StacksMessageType.Principal,
        prefix: constants_1.PostConditionPrincipalID.Contract,
        address: addr,
        contractName: name,
    };
}
exports.createContractPrincipal = createContractPrincipal;
function createStandardPrincipal(addressString) {
    const addr = createAddress(addressString);
    return {
        type: constants_1.StacksMessageType.Principal,
        prefix: constants_1.PostConditionPrincipalID.Standard,
        address: addr,
    };
}
exports.createStandardPrincipal = createStandardPrincipal;
//# sourceMappingURL=postcondition-types.js.map