"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAuthorization = exports.serializeAuthorization = exports.setSponsor = exports.setSponsorNonce = exports.setNonce = exports.getFee = exports.setFee = exports.verifyOrigin = exports.intoInitialSighashAuth = exports.createSponsoredAuth = exports.createStandardAuth = exports.nextVerification = exports.nextSignature = exports.makeSigHashPreSign = exports.deserializeSpendingCondition = exports.serializeSpendingCondition = exports.deserializeMultiSigSpendingCondition = exports.deserializeSingleSigSpendingCondition = exports.serializeMultiSigSpendingCondition = exports.serializeSingleSigSpendingCondition = exports.isSingleSig = exports.createMultiSigSpendingCondition = exports.createSingleSigSpendingCondition = exports.emptyMessageSignature = void 0;
const common_1 = require("@stacks/common");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const signature_1 = require("./signature");
const types_1 = require("./types");
const keys_1 = require("./keys");
const errors_1 = require("./errors");
function emptyMessageSignature() {
    return {
        type: constants_1.StacksMessageType.MessageSignature,
        data: common_1.Buffer.alloc(constants_1.RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, 0x00).toString('hex'),
    };
}
exports.emptyMessageSignature = emptyMessageSignature;
function createSingleSigSpendingCondition(hashMode, pubKey, nonce, fee) {
    const signer = (0, types_1.addressFromPublicKeys)(0, hashMode, 1, [(0, keys_1.createStacksPublicKey)(pubKey)]).hash160;
    const keyEncoding = (0, keys_1.isCompressed)((0, keys_1.createStacksPublicKey)(pubKey))
        ? constants_1.PubKeyEncoding.Compressed
        : constants_1.PubKeyEncoding.Uncompressed;
    return {
        hashMode,
        signer,
        nonce: (0, common_1.intToBigInt)(nonce, false),
        fee: (0, common_1.intToBigInt)(fee, false),
        keyEncoding,
        signature: emptyMessageSignature(),
    };
}
exports.createSingleSigSpendingCondition = createSingleSigSpendingCondition;
function createMultiSigSpendingCondition(hashMode, numSigs, pubKeys, nonce, fee) {
    const stacksPublicKeys = pubKeys.map(keys_1.createStacksPublicKey);
    const signer = (0, types_1.addressFromPublicKeys)(0, hashMode, numSigs, stacksPublicKeys).hash160;
    return {
        hashMode,
        signer,
        nonce: (0, common_1.intToBigInt)(nonce, false),
        fee: (0, common_1.intToBigInt)(fee, false),
        fields: [],
        signaturesRequired: numSigs,
    };
}
exports.createMultiSigSpendingCondition = createMultiSigSpendingCondition;
function isSingleSig(condition) {
    return 'signature' in condition;
}
exports.isSingleSig = isSingleSig;
function clearCondition(condition) {
    const cloned = (0, utils_1.cloneDeep)(condition);
    cloned.nonce = 0;
    cloned.fee = 0;
    if (isSingleSig(cloned)) {
        cloned.signature = emptyMessageSignature();
    }
    else {
        cloned.fields = [];
    }
    return Object.assign(Object.assign({}, cloned), { nonce: BigInt(0), fee: BigInt(0) });
}
function serializeSingleSigSpendingCondition(condition) {
    const bufferArray = new utils_1.BufferArray();
    bufferArray.appendByte(condition.hashMode);
    bufferArray.appendHexString(condition.signer);
    bufferArray.push((0, common_1.intToBytes)(condition.nonce, false, 8));
    bufferArray.push((0, common_1.intToBytes)(condition.fee, false, 8));
    bufferArray.appendByte(condition.keyEncoding);
    bufferArray.push((0, signature_1.serializeMessageSignature)(condition.signature));
    return bufferArray.concatBuffer();
}
exports.serializeSingleSigSpendingCondition = serializeSingleSigSpendingCondition;
function serializeMultiSigSpendingCondition(condition) {
    const bufferArray = new utils_1.BufferArray();
    bufferArray.appendByte(condition.hashMode);
    bufferArray.appendHexString(condition.signer);
    bufferArray.push((0, common_1.intToBytes)(condition.nonce, false, 8));
    bufferArray.push((0, common_1.intToBytes)(condition.fee, false, 8));
    const fields = (0, types_1.createLPList)(condition.fields);
    bufferArray.push((0, types_1.serializeLPList)(fields));
    const numSigs = common_1.Buffer.alloc(2);
    numSigs.writeUInt16BE(condition.signaturesRequired, 0);
    bufferArray.push(numSigs);
    return bufferArray.concatBuffer();
}
exports.serializeMultiSigSpendingCondition = serializeMultiSigSpendingCondition;
function deserializeSingleSigSpendingCondition(hashMode, bufferReader) {
    const signer = bufferReader.readBuffer(20).toString('hex');
    const nonce = BigInt('0x' + bufferReader.readBuffer(8).toString('hex'));
    const fee = BigInt('0x' + bufferReader.readBuffer(8).toString('hex'));
    const keyEncoding = bufferReader.readUInt8Enum(constants_1.PubKeyEncoding, n => {
        throw new errors_1.DeserializationError(`Could not parse ${n} as PubKeyEncoding`);
    });
    if (hashMode === constants_1.AddressHashMode.SerializeP2WPKH && keyEncoding != constants_1.PubKeyEncoding.Compressed) {
        throw new errors_1.DeserializationError('Failed to parse singlesig spending condition: incomaptible hash mode and key encoding');
    }
    const signature = (0, signature_1.deserializeMessageSignature)(bufferReader);
    return {
        hashMode,
        signer,
        nonce,
        fee,
        keyEncoding,
        signature,
    };
}
exports.deserializeSingleSigSpendingCondition = deserializeSingleSigSpendingCondition;
function deserializeMultiSigSpendingCondition(hashMode, bufferReader) {
    const signer = bufferReader.readBuffer(20).toString('hex');
    const nonce = BigInt('0x' + bufferReader.readBuffer(8).toString('hex'));
    const fee = BigInt('0x' + bufferReader.readBuffer(8).toString('hex'));
    const fields = (0, types_1.deserializeLPList)(bufferReader, constants_1.StacksMessageType.TransactionAuthField)
        .values;
    let haveUncompressed = false;
    let numSigs = 0;
    for (const field of fields) {
        switch (field.contents.type) {
            case constants_1.StacksMessageType.PublicKey:
                if (!(0, keys_1.isCompressed)(field.contents))
                    haveUncompressed = true;
                break;
            case constants_1.StacksMessageType.MessageSignature:
                if (field.pubKeyEncoding === constants_1.PubKeyEncoding.Uncompressed)
                    haveUncompressed = true;
                numSigs += 1;
                if (numSigs === 65536)
                    throw new errors_1.VerificationError('Failed to parse multisig spending condition: too many signatures');
                break;
        }
    }
    const signaturesRequired = bufferReader.readUInt16BE();
    if (haveUncompressed && hashMode === constants_1.AddressHashMode.SerializeP2SH)
        throw new errors_1.VerificationError('Uncompressed keys are not allowed in this hash mode');
    return {
        hashMode,
        signer,
        nonce,
        fee,
        fields,
        signaturesRequired,
    };
}
exports.deserializeMultiSigSpendingCondition = deserializeMultiSigSpendingCondition;
function serializeSpendingCondition(condition) {
    if (isSingleSig(condition)) {
        return serializeSingleSigSpendingCondition(condition);
    }
    else {
        return serializeMultiSigSpendingCondition(condition);
    }
}
exports.serializeSpendingCondition = serializeSpendingCondition;
function deserializeSpendingCondition(bufferReader) {
    const hashMode = bufferReader.readUInt8Enum(constants_1.AddressHashMode, n => {
        throw new errors_1.DeserializationError(`Could not parse ${n} as AddressHashMode`);
    });
    if (hashMode === constants_1.AddressHashMode.SerializeP2PKH || hashMode === constants_1.AddressHashMode.SerializeP2WPKH) {
        return deserializeSingleSigSpendingCondition(hashMode, bufferReader);
    }
    else {
        return deserializeMultiSigSpendingCondition(hashMode, bufferReader);
    }
}
exports.deserializeSpendingCondition = deserializeSpendingCondition;
function makeSigHashPreSign(curSigHash, authType, fee, nonce) {
    const hashLength = 32 + 1 + 8 + 8;
    const sigHash = curSigHash +
        common_1.Buffer.from([authType]).toString('hex') +
        (0, common_1.intToBytes)(fee, false, 8).toString('hex') +
        (0, common_1.intToBytes)(nonce, false, 8).toString('hex');
    if (common_1.Buffer.from(sigHash, 'hex').byteLength !== hashLength) {
        throw Error('Invalid signature hash length');
    }
    return (0, utils_1.txidFromData)(common_1.Buffer.from(sigHash, 'hex'));
}
exports.makeSigHashPreSign = makeSigHashPreSign;
function makeSigHashPostSign(curSigHash, pubKey, signature) {
    const hashLength = 32 + 1 + constants_1.RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;
    const pubKeyEncoding = (0, keys_1.isCompressed)(pubKey)
        ? constants_1.PubKeyEncoding.Compressed
        : constants_1.PubKeyEncoding.Uncompressed;
    const sigHash = curSigHash + (0, utils_1.leftPadHex)(pubKeyEncoding.toString(16)) + signature.data;
    const sigHashBuffer = common_1.Buffer.from(sigHash, 'hex');
    if (sigHashBuffer.byteLength > hashLength) {
        throw Error('Invalid signature hash length');
    }
    return (0, utils_1.txidFromData)(sigHashBuffer);
}
function nextSignature(curSigHash, authType, fee, nonce, privateKey) {
    const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);
    const signature = (0, keys_1.signWithKey)(privateKey, sigHashPreSign);
    const publicKey = (0, keys_1.getPublicKey)(privateKey);
    const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);
    return {
        nextSig: signature,
        nextSigHash,
    };
}
exports.nextSignature = nextSignature;
function nextVerification(initialSigHash, authType, fee, nonce, pubKeyEncoding, signature) {
    const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);
    const publicKey = (0, keys_1.createStacksPublicKey)((0, keys_1.publicKeyFromSignature)(sigHashPreSign, signature, pubKeyEncoding));
    const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);
    return {
        pubKey: publicKey,
        nextSigHash,
    };
}
exports.nextVerification = nextVerification;
function newInitialSigHash() {
    const spendingCondition = createSingleSigSpendingCondition(constants_1.AddressHashMode.SerializeP2PKH, '', 0, 0);
    spendingCondition.signer = (0, types_1.createEmptyAddress)().hash160;
    spendingCondition.keyEncoding = constants_1.PubKeyEncoding.Compressed;
    spendingCondition.signature = emptyMessageSignature();
    return spendingCondition;
}
function verify(condition, initialSigHash, authType) {
    if (isSingleSig(condition)) {
        return verifySingleSig(condition, initialSigHash, authType);
    }
    else {
        return verifyMultiSig(condition, initialSigHash, authType);
    }
}
function verifySingleSig(condition, initialSigHash, authType) {
    const { pubKey, nextSigHash } = nextVerification(initialSigHash, authType, condition.fee, condition.nonce, condition.keyEncoding, condition.signature);
    const addrBytes = (0, types_1.addressFromPublicKeys)(0, condition.hashMode, 1, [pubKey]).hash160;
    if (addrBytes !== condition.signer)
        throw new errors_1.VerificationError(`Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`);
    return nextSigHash;
}
function verifyMultiSig(condition, initialSigHash, authType) {
    const publicKeys = [];
    let curSigHash = initialSigHash;
    let haveUncompressed = false;
    let numSigs = 0;
    for (const field of condition.fields) {
        let foundPubKey;
        switch (field.contents.type) {
            case constants_1.StacksMessageType.PublicKey:
                if (!(0, keys_1.isCompressed)(field.contents))
                    haveUncompressed = true;
                foundPubKey = field.contents;
                break;
            case constants_1.StacksMessageType.MessageSignature:
                if (field.pubKeyEncoding === constants_1.PubKeyEncoding.Uncompressed)
                    haveUncompressed = true;
                const { pubKey, nextSigHash } = nextVerification(curSigHash, authType, condition.fee, condition.nonce, field.pubKeyEncoding, field.contents);
                curSigHash = nextSigHash;
                foundPubKey = pubKey;
                numSigs += 1;
                if (numSigs === 65536)
                    throw new errors_1.VerificationError('Too many signatures');
                break;
        }
        publicKeys.push(foundPubKey);
    }
    if (numSigs !== condition.signaturesRequired)
        throw new errors_1.VerificationError('Incorrect number of signatures');
    if (haveUncompressed && condition.hashMode === constants_1.AddressHashMode.SerializeP2SH)
        throw new errors_1.VerificationError('Uncompressed keys are not allowed in this hash mode');
    const addrBytes = (0, types_1.addressFromPublicKeys)(0, condition.hashMode, condition.signaturesRequired, publicKeys).hash160;
    if (addrBytes !== condition.signer)
        throw new errors_1.VerificationError(`Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`);
    return curSigHash;
}
function createStandardAuth(spendingCondition) {
    return {
        authType: constants_1.AuthType.Standard,
        spendingCondition,
    };
}
exports.createStandardAuth = createStandardAuth;
function createSponsoredAuth(spendingCondition, sponsorSpendingCondition) {
    return {
        authType: constants_1.AuthType.Sponsored,
        spendingCondition,
        sponsorSpendingCondition: sponsorSpendingCondition
            ? sponsorSpendingCondition
            : createSingleSigSpendingCondition(constants_1.AddressHashMode.SerializeP2PKH, '0'.repeat(66), 0, 0),
    };
}
exports.createSponsoredAuth = createSponsoredAuth;
function intoInitialSighashAuth(auth) {
    if (auth.spendingCondition) {
        switch (auth.authType) {
            case constants_1.AuthType.Standard:
                return createStandardAuth(clearCondition(auth.spendingCondition));
            case constants_1.AuthType.Sponsored:
                return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());
            default:
                throw new errors_1.SigningError('Unexpected authorization type for signing');
        }
    }
    throw new Error('Authorization missing SpendingCondition');
}
exports.intoInitialSighashAuth = intoInitialSighashAuth;
function verifyOrigin(auth, initialSigHash) {
    switch (auth.authType) {
        case constants_1.AuthType.Standard:
            return verify(auth.spendingCondition, initialSigHash, constants_1.AuthType.Standard);
        case constants_1.AuthType.Sponsored:
            return verify(auth.spendingCondition, initialSigHash, constants_1.AuthType.Standard);
        default:
            throw new errors_1.SigningError('Invalid origin auth type');
    }
}
exports.verifyOrigin = verifyOrigin;
function setFee(auth, amount) {
    switch (auth.authType) {
        case constants_1.AuthType.Standard:
            const spendingCondition = Object.assign(Object.assign({}, auth.spendingCondition), { fee: (0, common_1.intToBigInt)(amount, false) });
            return Object.assign(Object.assign({}, auth), { spendingCondition });
        case constants_1.AuthType.Sponsored:
            const sponsorSpendingCondition = Object.assign(Object.assign({}, auth.sponsorSpendingCondition), { fee: (0, common_1.intToBigInt)(amount, false) });
            return Object.assign(Object.assign({}, auth), { sponsorSpendingCondition });
    }
}
exports.setFee = setFee;
function getFee(auth) {
    switch (auth.authType) {
        case constants_1.AuthType.Standard:
            return auth.spendingCondition.fee;
        case constants_1.AuthType.Sponsored:
            return auth.sponsorSpendingCondition.fee;
    }
}
exports.getFee = getFee;
function setNonce(auth, nonce) {
    const spendingCondition = Object.assign(Object.assign({}, auth.spendingCondition), { nonce: (0, common_1.intToBigInt)(nonce, false) });
    return Object.assign(Object.assign({}, auth), { spendingCondition });
}
exports.setNonce = setNonce;
function setSponsorNonce(auth, nonce) {
    const sponsorSpendingCondition = Object.assign(Object.assign({}, auth.sponsorSpendingCondition), { nonce: (0, common_1.intToBigInt)(nonce, false) });
    return Object.assign(Object.assign({}, auth), { sponsorSpendingCondition });
}
exports.setSponsorNonce = setSponsorNonce;
function setSponsor(auth, sponsorSpendingCondition) {
    const sc = Object.assign(Object.assign({}, sponsorSpendingCondition), { nonce: (0, common_1.intToBigInt)(sponsorSpendingCondition.nonce, false), fee: (0, common_1.intToBigInt)(sponsorSpendingCondition.fee, false) });
    return Object.assign(Object.assign({}, auth), { sponsorSpendingCondition: sc });
}
exports.setSponsor = setSponsor;
function serializeAuthorization(auth) {
    const bufferArray = new utils_1.BufferArray();
    bufferArray.appendByte(auth.authType);
    switch (auth.authType) {
        case constants_1.AuthType.Standard:
            bufferArray.push(serializeSpendingCondition(auth.spendingCondition));
            break;
        case constants_1.AuthType.Sponsored:
            bufferArray.push(serializeSpendingCondition(auth.spendingCondition));
            bufferArray.push(serializeSpendingCondition(auth.sponsorSpendingCondition));
            break;
    }
    return bufferArray.concatBuffer();
}
exports.serializeAuthorization = serializeAuthorization;
function deserializeAuthorization(bufferReader) {
    const authType = bufferReader.readUInt8Enum(constants_1.AuthType, n => {
        throw new errors_1.DeserializationError(`Could not parse ${n} as AuthType`);
    });
    let spendingCondition;
    switch (authType) {
        case constants_1.AuthType.Standard:
            spendingCondition = deserializeSpendingCondition(bufferReader);
            return createStandardAuth(spendingCondition);
        case constants_1.AuthType.Sponsored:
            spendingCondition = deserializeSpendingCondition(bufferReader);
            const sponsorSpendingCondition = deserializeSpendingCondition(bufferReader);
            return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);
    }
}
exports.deserializeAuthorization = deserializeAuthorization;
//# sourceMappingURL=authorization.js.map