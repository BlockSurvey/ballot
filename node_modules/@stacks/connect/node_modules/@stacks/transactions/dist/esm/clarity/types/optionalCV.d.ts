import { ClarityValue } from '../clarityValue';
import { ClarityType } from '../constants';
declare type OptionalCV<T extends ClarityValue = ClarityValue> = NoneCV | SomeCV<T>;
interface NoneCV {
    readonly type: ClarityType.OptionalNone;
}
interface SomeCV<T extends ClarityValue = ClarityValue> {
    readonly type: ClarityType.OptionalSome;
    readonly value: T;
}
declare function noneCV(): NoneCV;
declare function someCV<T extends ClarityValue = ClarityValue>(value: T): OptionalCV<T>;
declare function optionalCVOf<T extends ClarityValue = ClarityValue>(value?: T): OptionalCV<T>;
export { OptionalCV, NoneCV, SomeCV, noneCV, someCV, optionalCVOf };
