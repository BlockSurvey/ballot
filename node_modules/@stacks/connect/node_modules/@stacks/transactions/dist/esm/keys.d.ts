/// <reference types="node" />
import { parseRecoverableSignatureVrs } from '@stacks/common';
import { BufferReader } from './bufferReader';
import { MessageSignature } from './common';
import { AddressVersion, PubKeyEncoding, StacksMessageType, TransactionVersion } from './constants';
export interface StacksPublicKey {
    readonly type: StacksMessageType.PublicKey;
    readonly data: Buffer;
}
export declare function getAddressFromPrivateKey(privateKey: string | Buffer, transactionVersion?: TransactionVersion): string;
export declare function getAddressFromPublicKey(publicKey: string | Buffer, transactionVersion?: TransactionVersion): string;
export declare function createStacksPublicKey(key: string): StacksPublicKey;
export declare function publicKeyFromSignatureVrs(message: string, messageSignature: MessageSignature, pubKeyEncoding?: PubKeyEncoding): string;
export declare function publicKeyFromSignatureRsv(message: string, messageSignature: MessageSignature, pubKeyEncoding?: PubKeyEncoding): string;
export declare const publicKeyFromSignature: typeof publicKeyFromSignatureVrs;
export declare function publicKeyFromBuffer(data: Buffer): StacksPublicKey;
export declare function isCompressed(key: StacksPublicKey): boolean;
export declare function publicKeyToString(key: StacksPublicKey): string;
export declare function serializePublicKey(key: StacksPublicKey): Buffer;
export declare function pubKeyfromPrivKey(privateKey: string | Buffer): StacksPublicKey;
export declare function compressPublicKey(publicKey: string | Buffer): StacksPublicKey;
export declare function deserializePublicKey(bufferReader: BufferReader): StacksPublicKey;
export interface StacksPrivateKey {
    compressed: boolean;
    data: Buffer;
}
export declare function createStacksPrivateKey(key: string | Buffer): StacksPrivateKey;
export declare function makeRandomPrivKey(): StacksPrivateKey;
export declare function signWithKey(privateKey: StacksPrivateKey, messageHash: string): MessageSignature;
export declare function signMessageHashRsv({ messageHash, privateKey, }: {
    messageHash: string;
    privateKey: StacksPrivateKey;
}): MessageSignature;
export declare const parseRecoverableSignature: typeof parseRecoverableSignatureVrs;
export declare function getPublicKey(privateKey: StacksPrivateKey): StacksPublicKey;
export declare function privateKeyToString(privateKey: StacksPrivateKey): string;
export declare function publicKeyToAddress(version: AddressVersion, publicKey: StacksPublicKey): string;
