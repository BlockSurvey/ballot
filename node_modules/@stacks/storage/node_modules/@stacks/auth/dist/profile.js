"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lookupProfile = void 0;
const profile_1 = require("@stacks/profile");
const network_1 = require("@stacks/network");
function lookupProfile(lookupOptions) {
    if (!lookupOptions.username) {
        return Promise.reject(new Error('No username provided'));
    }
    const defaultOptions = {
        network: new network_1.StacksMainnet(),
    };
    const options = Object.assign(defaultOptions, lookupOptions);
    const network = network_1.StacksNetwork.fromNameOrNetwork(options.network);
    let lookupPromise;
    if (options.zoneFileLookupURL) {
        const url = `${options.zoneFileLookupURL.replace(/\/$/, '')}/${options.username}`;
        lookupPromise = network.fetchFn(url).then(response => response.json());
    }
    else {
        lookupPromise = network.getNameInfo(options.username);
    }
    return lookupPromise.then((responseJSON) => {
        if (responseJSON.hasOwnProperty('zonefile') && responseJSON.hasOwnProperty('address')) {
            return (0, profile_1.resolveZoneFileToProfile)(responseJSON.zonefile, responseJSON.address, network.fetchFn);
        }
        else {
            throw new Error('Invalid zonefile lookup response: did not contain `address`' + ' or `zonefile` field');
        }
    });
}
exports.lookupProfile = lookupProfile;
//# sourceMappingURL=profile.js.map