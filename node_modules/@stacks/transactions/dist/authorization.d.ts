/// <reference types="node" />
import { IntegerType } from '@stacks/common';
import { AuthType, MultiSigHashMode, PubKeyEncoding, SingleSigHashMode } from './constants';
import { TransactionAuthField } from './signature';
import { StacksPrivateKey, StacksPublicKey } from './keys';
import { BufferReader } from './bufferReader';
import { MessageSignature } from './common';
export declare function emptyMessageSignature(): MessageSignature;
export interface SingleSigSpendingCondition {
    hashMode: SingleSigHashMode;
    signer: string;
    nonce: bigint;
    fee: bigint;
    keyEncoding: PubKeyEncoding;
    signature: MessageSignature;
}
export interface SingleSigSpendingConditionOpts extends Omit<SingleSigSpendingCondition, 'nonce' | 'fee'> {
    nonce: IntegerType;
    fee: IntegerType;
}
export interface MultiSigSpendingCondition {
    hashMode: MultiSigHashMode;
    signer: string;
    nonce: bigint;
    fee: bigint;
    fields: TransactionAuthField[];
    signaturesRequired: number;
}
export interface MultiSigSpendingConditionOpts extends Omit<MultiSigSpendingCondition, 'nonce' | 'fee'> {
    nonce: IntegerType;
    fee: IntegerType;
}
export declare type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;
export declare type SpendingConditionOpts = SingleSigSpendingConditionOpts | MultiSigSpendingConditionOpts;
export declare function createSingleSigSpendingCondition(hashMode: SingleSigHashMode, pubKey: string, nonce: IntegerType, fee: IntegerType): SingleSigSpendingCondition;
export declare function createMultiSigSpendingCondition(hashMode: MultiSigHashMode, numSigs: number, pubKeys: string[], nonce: IntegerType, fee: IntegerType): MultiSigSpendingCondition;
export declare function isSingleSig(condition: SpendingConditionOpts): condition is SingleSigSpendingConditionOpts;
export declare function serializeSingleSigSpendingCondition(condition: SingleSigSpendingConditionOpts): Buffer;
export declare function serializeMultiSigSpendingCondition(condition: MultiSigSpendingConditionOpts): Buffer;
export declare function deserializeSingleSigSpendingCondition(hashMode: SingleSigHashMode, bufferReader: BufferReader): SingleSigSpendingCondition;
export declare function deserializeMultiSigSpendingCondition(hashMode: MultiSigHashMode, bufferReader: BufferReader): MultiSigSpendingCondition;
export declare function serializeSpendingCondition(condition: SpendingConditionOpts): Buffer;
export declare function deserializeSpendingCondition(bufferReader: BufferReader): SpendingCondition;
export declare function makeSigHashPreSign(curSigHash: string, authType: AuthType, fee: IntegerType, nonce: IntegerType): string;
export declare function nextSignature(curSigHash: string, authType: AuthType, fee: IntegerType, nonce: IntegerType, privateKey: StacksPrivateKey): {
    nextSig: MessageSignature;
    nextSigHash: string;
};
export declare function nextVerification(initialSigHash: string, authType: AuthType, fee: IntegerType, nonce: IntegerType, pubKeyEncoding: PubKeyEncoding, signature: MessageSignature): {
    pubKey: StacksPublicKey;
    nextSigHash: string;
};
export declare type Authorization = StandardAuthorization | SponsoredAuthorization;
export interface StandardAuthorization {
    authType: AuthType.Standard;
    spendingCondition: SpendingCondition;
}
export interface SponsoredAuthorization {
    authType: AuthType.Sponsored;
    spendingCondition: SpendingCondition;
    sponsorSpendingCondition: SpendingCondition;
}
export declare function createStandardAuth(spendingCondition: SpendingCondition): StandardAuthorization;
export declare function createSponsoredAuth(spendingCondition: SpendingCondition, sponsorSpendingCondition?: SpendingCondition): Authorization;
export declare function intoInitialSighashAuth(auth: Authorization): Authorization;
export declare function verifyOrigin(auth: Authorization, initialSigHash: string): string;
export declare function setFee(auth: Authorization, amount: IntegerType): Authorization;
export declare function getFee(auth: Authorization): bigint;
export declare function setNonce(auth: Authorization, nonce: IntegerType): Authorization;
export declare function setSponsorNonce(auth: SponsoredAuthorization, nonce: IntegerType): Authorization;
export declare function setSponsor(auth: SponsoredAuthorization, sponsorSpendingCondition: SpendingConditionOpts): Authorization;
export declare function serializeAuthorization(auth: Authorization): Buffer;
export declare function deserializeAuthorization(bufferReader: BufferReader): Authorization;
