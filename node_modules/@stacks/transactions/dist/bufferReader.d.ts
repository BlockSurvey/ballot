/// <reference types="node" />
import { SmartBuffer, SmartBufferOptions } from 'smart-buffer';
export declare function isEnum<T extends string, TEnumValue extends number>(enumVariable: {
    [key in T]: TEnumValue;
}, value: number): value is TEnumValue;
export declare class BufferReader {
    smartBuffer: SmartBuffer;
    static fromBuffer(buffer: Buffer): BufferReader;
    constructor(options?: SmartBufferOptions | Buffer);
    readBuffer(length: number): Buffer;
    readUInt32BE(offset?: number): number;
    readUInt8(): number;
    readUInt16BE(): number;
    readBigUIntLE(length: number): bigint;
    readBigUIntBE(length: number): bigint;
    readBigUInt64BE(): bigint;
    readString(arg?: number | BufferEncoding, encoding?: BufferEncoding): string;
    get readOffset(): number;
    set readOffset(val: number);
    get internalBuffer(): Buffer;
    readUInt8Enum<T extends string, TEnumValue extends number>(enumVariable: {
        [key in T]: TEnumValue;
    }, invalidEnumErrorFormatter: (val: number) => Error): TEnumValue;
}
