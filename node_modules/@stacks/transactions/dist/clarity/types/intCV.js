"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uintCV = exports.intCV = void 0;
const common_1 = require("@stacks/common");
const constants_1 = require("../constants");
const MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff');
const MIN_U128 = BigInt(0);
const MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff');
const MIN_I128 = BigInt('-170141183460469231731687303715884105728');
const intCV = (value) => {
    const bigInt = (0, common_1.intToBigInt)(value, true);
    if (bigInt > MAX_I128) {
        throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128.toString()}`);
    }
    else if (bigInt < MIN_I128) {
        throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128.toString()}`);
    }
    return { type: constants_1.ClarityType.Int, value: bigInt };
};
exports.intCV = intCV;
const uintCV = (value) => {
    const bigInt = (0, common_1.intToBigInt)(value, false);
    if (bigInt < MIN_U128) {
        throw new RangeError('Cannot construct unsigned clarity integer from negative value');
    }
    else if (bigInt > MAX_U128) {
        throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128.toString()}`);
    }
    return { type: constants_1.ClarityType.UInt, value: bigInt };
};
exports.uintCV = uintCV;
//# sourceMappingURL=intCV.js.map