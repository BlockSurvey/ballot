"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCVTypeString = exports.cvToJSON = exports.cvToValue = exports.cvToString = void 0;
const common_1 = require("@stacks/common");
const principalCV_1 = require("./types/principalCV");
const constants_1 = require("./constants");
function cvToString(val, encoding = 'hex') {
    switch (val.type) {
        case constants_1.ClarityType.BoolTrue:
            return 'true';
        case constants_1.ClarityType.BoolFalse:
            return 'false';
        case constants_1.ClarityType.Int:
            return val.value.toString();
        case constants_1.ClarityType.UInt:
            return `u${val.value.toString()}`;
        case constants_1.ClarityType.Buffer:
            if (encoding === 'tryAscii') {
                const str = val.buffer.toString('ascii');
                if (/[ -~]/.test(str)) {
                    return JSON.stringify(str);
                }
            }
            return `0x${val.buffer.toString('hex')}`;
        case constants_1.ClarityType.OptionalNone:
            return 'none';
        case constants_1.ClarityType.OptionalSome:
            return `(some ${cvToString(val.value, encoding)})`;
        case constants_1.ClarityType.ResponseErr:
            return `(err ${cvToString(val.value, encoding)})`;
        case constants_1.ClarityType.ResponseOk:
            return `(ok ${cvToString(val.value, encoding)})`;
        case constants_1.ClarityType.PrincipalStandard:
        case constants_1.ClarityType.PrincipalContract:
            return (0, principalCV_1.principalToString)(val);
        case constants_1.ClarityType.List:
            return `(list ${val.list.map(v => cvToString(v, encoding)).join(' ')})`;
        case constants_1.ClarityType.Tuple:
            return `(tuple ${Object.keys(val.data)
                .map(key => `(${key} ${cvToString(val.data[key], encoding)})`)
                .join(' ')})`;
        case constants_1.ClarityType.StringASCII:
            return `"${val.data}"`;
        case constants_1.ClarityType.StringUTF8:
            return `u"${val.data}"`;
    }
}
exports.cvToString = cvToString;
function cvToValue(val, strictJsonCompat = false) {
    switch (val.type) {
        case constants_1.ClarityType.BoolTrue:
            return true;
        case constants_1.ClarityType.BoolFalse:
            return false;
        case constants_1.ClarityType.Int:
        case constants_1.ClarityType.UInt:
            if (strictJsonCompat) {
                return val.value.toString();
            }
            else {
                return val.value;
            }
        case constants_1.ClarityType.Buffer:
            return `0x${val.buffer.toString('hex')}`;
        case constants_1.ClarityType.OptionalNone:
            return null;
        case constants_1.ClarityType.OptionalSome:
            return cvToJSON(val.value);
        case constants_1.ClarityType.ResponseErr:
            return cvToJSON(val.value);
        case constants_1.ClarityType.ResponseOk:
            return cvToJSON(val.value);
        case constants_1.ClarityType.PrincipalStandard:
        case constants_1.ClarityType.PrincipalContract:
            return (0, principalCV_1.principalToString)(val);
        case constants_1.ClarityType.List:
            return val.list.map(v => cvToJSON(v));
        case constants_1.ClarityType.Tuple:
            const result = {};
            Object.keys(val.data).forEach(key => {
                result[key] = cvToJSON(val.data[key]);
            });
            return result;
        case constants_1.ClarityType.StringASCII:
            return val.data;
        case constants_1.ClarityType.StringUTF8:
            return val.data;
    }
}
exports.cvToValue = cvToValue;
function cvToJSON(val) {
    switch (val.type) {
        case constants_1.ClarityType.ResponseErr:
            return { type: getCVTypeString(val), value: cvToValue(val, true), success: false };
        case constants_1.ClarityType.ResponseOk:
            return { type: getCVTypeString(val), value: cvToValue(val, true), success: true };
        default:
            return { type: getCVTypeString(val), value: cvToValue(val, true) };
    }
}
exports.cvToJSON = cvToJSON;
function getCVTypeString(val) {
    switch (val.type) {
        case constants_1.ClarityType.BoolTrue:
        case constants_1.ClarityType.BoolFalse:
            return 'bool';
        case constants_1.ClarityType.Int:
            return 'int';
        case constants_1.ClarityType.UInt:
            return 'uint';
        case constants_1.ClarityType.Buffer:
            return `(buff ${val.buffer.length})`;
        case constants_1.ClarityType.OptionalNone:
            return '(optional none)';
        case constants_1.ClarityType.OptionalSome:
            return `(optional ${getCVTypeString(val.value)})`;
        case constants_1.ClarityType.ResponseErr:
            return `(response UnknownType ${getCVTypeString(val.value)})`;
        case constants_1.ClarityType.ResponseOk:
            return `(response ${getCVTypeString(val.value)} UnknownType)`;
        case constants_1.ClarityType.PrincipalStandard:
        case constants_1.ClarityType.PrincipalContract:
            return 'principal';
        case constants_1.ClarityType.List:
            return `(list ${val.list.length} ${val.list.length ? getCVTypeString(val.list[0]) : 'UnknownType'})`;
        case constants_1.ClarityType.Tuple:
            return `(tuple ${Object.keys(val.data)
                .map(key => `(${key} ${getCVTypeString(val.data[key])})`)
                .join(' ')})`;
        case constants_1.ClarityType.StringASCII:
            return `(string-ascii ${common_1.Buffer.from(val.data, 'ascii').length})`;
        case constants_1.ClarityType.StringUTF8:
            return `(string-utf8 ${common_1.Buffer.from(val.data, 'utf8').length})`;
    }
}
exports.getCVTypeString = getCVTypeString;
//# sourceMappingURL=clarityValue.js.map