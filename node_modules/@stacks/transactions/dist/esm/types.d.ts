/// <reference types="node" />
import { AddressHashMode, AddressVersion, TransactionVersion, StacksMessageType } from './constants';
import { StacksPublicKey } from './keys';
import { BufferReader } from './bufferReader';
import { PostCondition, PostConditionPrincipal, LengthPrefixedString, AssetInfo } from './postcondition-types';
import { Payload } from './payload';
import { TransactionAuthField } from './signature';
import { MessageSignature, Address } from './common';
export declare type StacksMessage = Address | PostConditionPrincipal | LengthPrefixedString | LengthPrefixedList | Payload | MemoString | AssetInfo | PostCondition | StacksPublicKey | TransactionAuthField | MessageSignature;
export declare function serializeStacksMessage(message: StacksMessage): Buffer;
export declare function deserializeStacksMessage(bufferReader: BufferReader, type: StacksMessageType, listType?: StacksMessageType): StacksMessage;
export declare function createEmptyAddress(): Address;
export declare function addressFromHashMode(hashMode: AddressHashMode, txVersion: TransactionVersion, data: string): Address;
export declare function addressFromPublicKeys(version: AddressVersion, hashMode: AddressHashMode, numSigs: number, publicKeys: StacksPublicKey[]): Address;
export declare function serializeAddress(address: Address): Buffer;
export declare function deserializeAddress(bufferReader: BufferReader): Address;
export declare function serializePrincipal(principal: PostConditionPrincipal): Buffer;
export declare function deserializePrincipal(bufferReader: BufferReader): PostConditionPrincipal;
export declare function serializeLPString(lps: LengthPrefixedString): Buffer;
export declare function deserializeLPString(bufferReader: BufferReader, prefixBytes?: number, maxLength?: number): LengthPrefixedString;
export declare function codeBodyString(content: string): LengthPrefixedString;
export interface MemoString {
    readonly type: StacksMessageType.MemoString;
    readonly content: string;
}
export declare function createMemoString(content: string): MemoString;
export declare function serializeMemoString(memoString: MemoString): Buffer;
export declare function deserializeMemoString(bufferReader: BufferReader): MemoString;
export declare function serializeAssetInfo(info: AssetInfo): Buffer;
export declare function deserializeAssetInfo(bufferReader: BufferReader): AssetInfo;
export interface LengthPrefixedList {
    readonly type: StacksMessageType.LengthPrefixedList;
    readonly lengthPrefixBytes: number;
    readonly values: StacksMessage[];
}
export declare function createLPList<T extends StacksMessage>(values: T[], lengthPrefixBytes?: number): LengthPrefixedList;
export declare function serializeLPList(lpList: LengthPrefixedList): Buffer;
export declare function deserializeLPList(bufferReader: BufferReader, type: StacksMessageType, lengthPrefixBytes?: number): LengthPrefixedList;
export declare function serializePostCondition(postCondition: PostCondition): Buffer;
export declare function deserializePostCondition(bufferReader: BufferReader): PostCondition;
