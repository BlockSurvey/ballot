"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHmacSha256 = exports.WebCryptoHmacSha256 = exports.NodeCryptoHmacSha256 = void 0;
const common_1 = require("@stacks/common");
const cryptoUtils_1 = require("./cryptoUtils");
class NodeCryptoHmacSha256 {
    constructor(createHmac) {
        this.createHmac = createHmac;
    }
    async digest(key, data) {
        const result = this.createHmac('sha256', key).update(data).digest();
        return Promise.resolve(result);
    }
}
exports.NodeCryptoHmacSha256 = NodeCryptoHmacSha256;
class WebCryptoHmacSha256 {
    constructor(subtleCrypto) {
        this.subtleCrypto = subtleCrypto;
    }
    async digest(key, data) {
        const cryptoKey = await this.subtleCrypto.importKey('raw', key, { name: 'HMAC', hash: 'SHA-256' }, true, ['sign']);
        const sig = await this.subtleCrypto.sign({ name: 'HMAC', hash: 'SHA-256' }, cryptoKey, data);
        return common_1.Buffer.from(sig);
    }
}
exports.WebCryptoHmacSha256 = WebCryptoHmacSha256;
async function createHmacSha256() {
    const cryptoLib = await (0, cryptoUtils_1.getCryptoLib)();
    if (cryptoLib.name === 'subtleCrypto') {
        return new WebCryptoHmacSha256(cryptoLib.lib);
    }
    else {
        return new NodeCryptoHmacSha256(cryptoLib.lib.createHmac);
    }
}
exports.createHmacSha256 = createHmacSha256;
//# sourceMappingURL=hmacSha256.js.map