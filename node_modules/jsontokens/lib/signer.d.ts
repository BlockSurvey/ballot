/// <reference types="node" />
/// <reference types="node" />
import { SECP256K1Client } from './cryptoClients';
import { Json } from './decode';
export declare function createUnsecuredToken(payload: Json): string;
export interface SignedToken {
    header: string[];
    payload: string;
    signature: string[];
}
export declare class TokenSigner {
    tokenType: string;
    cryptoClient: typeof SECP256K1Client;
    rawPrivateKey: string;
    constructor(signingAlgorithm: string, rawPrivateKey: string);
    header(header?: {}): {
        typ: string;
        alg: string;
    };
    sign(payload: Json): string;
    sign(payload: Json, expanded: true, customHeader?: Json): SignedToken;
    sign(payload: Json, expanded: false, customHeader?: Json): string;
    signAsync(payload: Json): Promise<string>;
    signAsync(payload: Json, expanded: true, customHeader?: Json): Promise<SignedToken>;
    signAsync(payload: Json, expanded: false, customHeader?: Json): Promise<string>;
    createWithSignedHash(payload: Json, expanded: boolean, header: {
        typ: string;
        alg: string;
    }, signingInput: string, signingInputHash: Buffer): SignedToken | string;
}
